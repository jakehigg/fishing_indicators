[{"filePath":"/app/src/app/app.component.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ChangeDetectionStrategy' is defined but never used.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'environment' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":21}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { HttpClient, HttpClientModule } from '@angular/common/http'; // Import HttpClientModule\nimport { MatCardModule } from '@angular/material/card';\nimport { environment } from '../environments/environment'; // Make sure you have the API URL set in the environment file\nimport { WaterComponent } from './water.component';\nimport { CurrentWeatherComponent } from './current_weather.component';\nimport { ChartComponent } from './chart.component';\nimport { TideChartComponent } from './tide-chart.component';\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [\n    MatCardModule, \n    HttpClientModule, \n    WaterComponent, \n    CurrentWeatherComponent, \n    ChartComponent,\n    TideChartComponent\n  ],\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n\n})\nexport class AppComponent implements OnInit {\n  title = 'find_frontend';\n  locationData: { lat: number; long: number; accuracy: number } | null = null; // To store the current location\n\n  constructor(private http: HttpClient) {}\n\n  ngOnInit(): void {\n    this.getLocation(); \n  }\n\n  public getLocation() {\n    navigator.geolocation.getCurrentPosition(\n      (position) => {\n        this.locationData = {\n          lat: position.coords.latitude,\n          long: position.coords.longitude,\n          accuracy: position.coords.accuracy,\n        };  \n      },\n      (error) => {\n        console.error('Geolocation error:', error);\n      }\n    );\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/app/chart.component.ts","messages":[{"ruleId":"@angular-eslint/component-selector","severity":2,"message":"The selector should start with one of these prefixes: \"app\" (https://angular.dev/style-guide#style-02-07)","line":8,"column":13,"nodeType":"Literal","messageId":"prefixFailure","endLine":8,"endColumn":30}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Component, ViewChild, ElementRef, AfterViewInit } from '@angular/core';\nimport { Chart } from 'chart.js/auto';\nimport { MatCardModule } from '@angular/material/card';\nimport { HttpClientModule } from '@angular/common/http';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'chart-component',\n  standalone: true,\n  imports: [MatCardModule, HttpClientModule, CommonModule],\n  templateUrl: './chart.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class ChartComponent implements AfterViewInit {\n  @ViewChild('myChart') chartRef!: ElementRef<HTMLCanvasElement>;\n\n  ngAfterViewInit() {\n    if (!this.chartRef?.nativeElement) {\n      console.error('Chart canvas not found');\n      return;\n    }\n\n    new Chart(this.chartRef.nativeElement, {\n      type: 'line',\n      data: {\n        labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n        datasets: [{\n          label: 'My First dataset',\n          data: [65, 59, 80, 81, 56, 55, 40],\n          backgroundColor: 'rgba(255, 99, 132, 0.2)',\n          borderColor: 'rgba(255, 99, 132, 1)',\n          borderWidth: 1,\n          tension: 0.4,\n        }]\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        scales: {\n          y: {\n            beginAtZero: true\n          }\n        }\n      }\n    });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/app/current_weather.component.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'convertUTCToLocalTime' is defined but never used.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":31},{"ruleId":"@angular-eslint/component-selector","severity":2,"message":"The selector should start with one of these prefixes: \"app\" (https://angular.dev/style-guide#style-02-07)","line":9,"column":13,"nodeType":"Literal","messageId":"prefixFailure","endLine":9,"endColumn":40},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type boolean trivially inferred from a boolean literal, remove type annotation.","line":19,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":19,"endColumn":30,"fix":{"range":[1090,1099],"text":""}}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { Component, OnChanges, SimpleChanges, Input } from '@angular/core';\nimport { HttpClient, HttpClientModule } from '@angular/common/http'; // Import HttpClientModule\nimport { MatCardModule } from '@angular/material/card';\nimport { environment } from '../environments/environment'; // Make sure you have the API URL set in the environment file\nimport { CommonModule } from '@angular/common';\nimport { convertUTCToLocalTime } from './_helpers';\n\n@Component({\n  selector: 'current-weather-component',\n  standalone: true,\n  imports: [MatCardModule, HttpClientModule, CommonModule], // Add HttpClientModule to the imports array\n  templateUrl: './current_weather.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class CurrentWeatherComponent implements OnChanges {\n  @Input() locationData: { lat: number; long: number; accuracy: number } | null = null; // To store the current location() position: { lat: number; long: number; accuracy: number } | null = null; // To store the current location\n  startTime: string | null = null;\n  endTime: string | null = null;\n  isDaytime: boolean = false;\n  temperature: number | null = null;\n  temperatureUnit: string | null = null;\n  temperatureTrend: string | null = null;\n  precipitationProbability: number | null = null;\n  windSpeed: string | null = null;\n  windDirection: string | null = null;\n  weatherIcon: string | null = null;\n  shortForecast: string | null = null;\n  detailedForecast: string | null = null;\n\n  constructor(private http: HttpClient) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['locationData']) {\n  \n      if (this.locationData) {\n        this.getWeather();\n      }\n    }\n  }\n\n  private getWeather() {\n    if (!this.locationData) return;\n\n\n    const url = `${environment.apiUrl}/weather?lat=${this.locationData.lat}&long=${this.locationData.long}&accuracy=${this.locationData.accuracy}`;\n    this.http.get<{ \n        current_tide_cycle: string, \n        next_tide_time: string, \n        next_tide_v: number,\n        period_name: string,\n        start_time: string,\n        end_time: string,\n        is_daytime: boolean,\n        temperature: number,\n        temperature_unit: string,\n        temperature_trend: string,\n        precipitation_probability: number,\n        wind_speed: string,\n        wind_direction: string,\n        icon: string,\n        short_forecast: string,\n        detailed_forecast: string\n    }>(url).subscribe({\n        next: (response) => {\n        this.isDaytime = response.is_daytime;\n        this.temperature = response.temperature;\n        this.temperatureUnit = response.temperature_unit;\n        this.temperatureTrend = response.temperature_trend;\n        this.precipitationProbability = response.precipitation_probability;\n        this.windSpeed = response.wind_speed;\n        this.windDirection = response.wind_direction;\n        this.weatherIcon = response.icon;\n        this.shortForecast = response.short_forecast;\n        this.detailedForecast = response.detailed_forecast;\n        },\n        error: (err) => {\n        console.error('Error fetching weather data:', err);\n        }\n    });\n    }\n    \n\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/app/tide-chart.component.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AfterViewInit' is defined but never used.","line":1,"column":77,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":90},{"ruleId":"@angular-eslint/component-selector","severity":2,"message":"The selector should start with one of these prefixes: \"app\" (https://angular.dev/style-guide#style-02-07)","line":32,"column":13,"nodeType":"Literal","messageId":"prefixFailure","endLine":32,"endColumn":35},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type string trivially inferred from a string literal, remove type annotation.","line":42,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":42,"endColumn":33,"fix":{"range":[1340,1348],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type string trivially inferred from a string literal, remove type annotation.","line":43,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":43,"endColumn":29,"fix":{"range":[1369,1377],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type string trivially inferred from a string literal, remove type annotation.","line":44,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":44,"endColumn":26,"fix":{"range":[1395,1403],"text":""}}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"import { Component, ViewChild, ElementRef, OnChanges, SimpleChanges, Input, AfterViewInit, AfterViewChecked } from '@angular/core';\nimport { Chart } from 'chart.js/auto';\nimport { MatCardModule } from '@angular/material/card';\nimport { HttpClient, HttpClientModule } from '@angular/common/http';\nimport { CommonModule } from '@angular/common';\nimport { environment } from '../environments/environment'; \nimport { convertUTCToLocalTime } from './_helpers';\nimport 'chartjs-adapter-moment';\ninterface WaterLevels {\n  t: string;\n  v: string;\n}\n\ninterface PredictionRawData {\n  predictions: WaterLevels[];\n}\n\ninterface WaterLevelRawData {\n  water_levels: WaterLevels[];\n}\n\ninterface TideData {\n  current_tide_cycle: string;\n  next_tide_time: string;\n  next_tide_v: string;\n  station_name: string;\n  predictions_data: PredictionRawData;\n  water_level_data: WaterLevelRawData;\n}\n\n@Component({\n  selector: 'tide-chart-component',\n  standalone: true,\n  imports: [MatCardModule, HttpClientModule, CommonModule],\n  templateUrl: './tide-chart.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class TideChartComponent implements OnChanges, AfterViewChecked {\n  @ViewChild('tideChart') chartRef!: ElementRef<HTMLCanvasElement>;\n  @Input() locationData: { lat: number; long: number; accuracy: number } | null = null; \n\n  currentTideCycle: string = '';\n  nextTideTime: string = '';\n  nextTideV: string = '';\n  stationName: string | null = null; \n  predictions: WaterLevels[] = [];\n  water_level_data: WaterLevels[] = [];\n  private chartInstance: Chart | null = null; \n\n  constructor(private http: HttpClient) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['locationData'] && this.locationData) {\n      if (!this.chartRef?.nativeElement) {\n        console.error('Chart canvas not found');\n        return;\n      }\n      this.getTides();  \n      console.log(`Station`)\n      // Avoid re-creating the chart if it already exists\n      if (!this.chartRef) {\n        console.log('Creating chart for the first time');\n        this.createChart();\n      }\n  \n      \n    }\n  }\n\n  ngAfterViewChecked() {\n    if (this.chartRef?.nativeElement) {\n      this.createChart();\n    }\n  }\n\n  private getTides() {\n    if (!this.locationData) return;\n    console.log('Fetching tide data for location:', this.locationData);\n    const url = `${environment.apiUrl}/tide?lat=${this.locationData.lat}&long=${this.locationData.long}&accuracy=${this.locationData.accuracy}`;\n    this.http.get<TideData>(url).subscribe({\n      next: (response) => {\n        this.currentTideCycle = response.current_tide_cycle;\n        this.nextTideTime = convertUTCToLocalTime(response.next_tide_time);\n        this.nextTideV = response.next_tide_v;\n        this.stationName = response.station_name;\n        this.predictions = response.predictions_data.predictions;\n        this.water_level_data = response.water_level_data.water_levels;\n        this.updateChart();\n      },\n      error: (err) => {\n        console.error('Error fetching tide data:', err);\n      }\n    });\n  }\n\n  private createChart() {\n    if (this.chartInstance) {\n      return;\n    }\n    \n    if (this.chartRef?.nativeElement) {\n      this.chartInstance = new Chart(this.chartRef.nativeElement, {\n        type: 'line',\n        data: {\n          labels: [ \n            new Date(0).getTime(),\n            new Date(1).getTime(),\n            new Date(2).getTime(),\n            new Date(3).getTime(),\n            new Date(4).getTime(),\n            new Date(5).getTime(),\n          ],\n          datasets: [{\n            label: 'Tide',\n            data: [\n            ],\n            backgroundColor: 'rgba(255, 99, 132, 0.2)',\n            borderColor: 'rgba(255, 99, 132, 1)',\n            borderWidth: 1,\n            tension: 0.4,\n          },\n          {\n            label: 'Water Levels',\n            data: [],\n            backgroundColor: 'rgba(135, 99, 255, 0.2)',\n            borderColor: 'rgb(102, 99, 255)',\n            borderWidth: 1,\n            tension: 0.4,\n          },\n        ]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          spanGaps: true,\n          scales: {\n            x: {\n              type: 'time',\n              time: {\n                tooltipFormat: 'DD HH:mm',\n                unit: 'hour',\n                displayFormats: {\n                  hour: 'DD HH:mm'\n                }\n              },\n              title: {\n                display: false,\n                text: 'Date'\n              },\n              grid: {\n                display: true,\n\n              }\n            },\n            y: {\n              beginAtZero: true\n            }\n          },\n        }\n      });\n    }\n  }\n\n  private updateChart() {\n    if (!this.chartRef?.nativeElement || !this.chartInstance) return;\n  \n    let allTimes = [\n      ...this.predictions.map(p => convertUTCToLocalTime(p.t)), \n      ...this.water_level_data.map(w => convertUTCToLocalTime(w.t))\n    ];\n    allTimes = [...new Set(allTimes)].sort(); // Unique & sorted times\n  \n    const tideMap = new Map(this.predictions.map(p => [\n      convertUTCToLocalTime(p.t), parseFloat(p.v)\n    ]));\n  \n    const waterLevelMap = new Map(this.water_level_data.map(w => [\n      convertUTCToLocalTime(w.t), parseFloat(w.v)\n    ]));\n  \n    const tideValues = allTimes.map(time => tideMap.get(time) ?? null);\n    const waterLevelValues = allTimes.map(time => waterLevelMap.get(time) ?? null);\n  \n    this.chartInstance.data.labels = allTimes;\n    this.chartInstance.data.datasets[0].data = tideValues;\n    this.chartInstance.data.datasets[1].data = waterLevelValues;\n    console.log(`labels:`, allTimes)\n    console.log(`tide chart data:`, tideValues)\n    console.log(`water level chart data:`, waterLevelValues)\n\n\n    this.chartInstance.update();\n  }\n  \n\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/app/water.component.ts","messages":[{"ruleId":"@angular-eslint/component-selector","severity":2,"message":"The selector should start with one of these prefixes: \"app\" (https://angular.dev/style-guide#style-02-07)","line":9,"column":13,"nodeType":"Literal","messageId":"prefixFailure","endLine":9,"endColumn":30}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Component, OnChanges, SimpleChanges, Input } from '@angular/core';\nimport { HttpClient, HttpClientModule } from '@angular/common/http'; \nimport { MatCardModule } from '@angular/material/card';\nimport { environment } from '../environments/environment'; \nimport { CommonModule } from '@angular/common';\nimport { convertUTCToLocalTime } from './_helpers';\n\n@Component({\n  selector: 'water-component',\n  standalone: true,\n  imports: [MatCardModule, HttpClientModule, CommonModule],\n  templateUrl: './water.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class WaterComponent implements OnChanges {\n  @Input() locationData: { lat: number; long: number; accuracy: number } | null = null; \n  currentTideCycle: string | null = null; \n  currentWaterLevel: number | null = null; \n  nextTideTime: string | null = null; \n  nextTideV: number | null = null; \n  waterTemperature: number | null = null; \n  stationName: string | null = null; \n  waterTemperatureTimeStamp: string | null = null; \n  waterTemperatureTrend: string | null = null; \n  constructor(private http: HttpClient) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['locationData']) {\n  \n      if (this.locationData) {\n        this.getTides();\n        this.getWaterTemperature();\n      }\n    }\n  }\n\n  private getTides() {\n    if (!this.locationData) return;\n\n    const url = `${environment.apiUrl}/tide?lat=${this.locationData.lat}&long=${this.locationData.long}&accuracy=${this.locationData.accuracy}`;\n    this.http.get<{ current_water_level: number, current_tide_cycle: string; next_tide_time: string; next_tide_v: number }>(url).subscribe({\n      next: (response) => {\n        this.currentWaterLevel = response.current_water_level;\n        this.currentTideCycle = response.current_tide_cycle;\n        this.nextTideTime = convertUTCToLocalTime(response.next_tide_time);\n        this.nextTideV = response.next_tide_v;\n        \n      },\n      error: (err) => {\n        console.error('Error fetching tide data:', err);\n      }\n    });\n  }\n\n  private getWaterTemperature() {\n    if (!this.locationData) return;\n\n    const url = `${environment.apiUrl}/water_temperature?lat=${this.locationData.lat}&long=${this.locationData.long}&accuracy=${this.locationData.accuracy}`;\n    this.http.get<{ current_water_temperature: number, station_name: string, metric_time: string, trend: string }>(url).subscribe({\n      next: (response) => {\n        this.waterTemperature = response.current_water_temperature;\n        this.stationName = response.station_name;\n        this.waterTemperatureTimeStamp = convertUTCToLocalTime(response.metric_time);\n        this.waterTemperatureTrend = response.trend;\n      },\n      error: (err) => {\n        console.error('Error fetching water temperature:', err); \n      }\n    });\n  }\n\n}\n","usedDeprecatedRules":[]}]
